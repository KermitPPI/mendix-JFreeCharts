// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jfreecharts.actions;

import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class BarChart extends CustomJavaAction<String>
{
	private java.util.List<IMendixObject> __RowBarList;
	private java.util.List<jfreecharts.proxies.RowBar> RowBarList;
	private IMendixObject BarImage;
	private String BarChartTitle;
	private String XAxisLabel;
	private String YAxisLabel;

	public BarChart(IContext context, java.util.List<IMendixObject> RowBarList, IMendixObject BarImage, String BarChartTitle, String XAxisLabel, String YAxisLabel)
	{
		super(context);
		this.__RowBarList = RowBarList;
		this.BarImage = BarImage;
		this.BarChartTitle = BarChartTitle;
		this.XAxisLabel = XAxisLabel;
		this.YAxisLabel = YAxisLabel;
	}

	@Override
	public String executeAction() throws Exception
	{
		this.RowBarList = new java.util.ArrayList<jfreecharts.proxies.RowBar>();
		if (__RowBarList != null)
			for (IMendixObject __RowBarListElement : __RowBarList)
				this.RowBarList.add(jfreecharts.proxies.RowBar.initialize(getContext(), __RowBarListElement));

		// BEGIN USER CODE
		

		 BarChartDemo7 demo = new BarChartDemo7("");
	     //demo.pack();
	     //RefineryUtilities.centerFrameOnScreen(demo);
	    // demo.setVisible(true);

	     return "The bar chart is generated";
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "BarChart";
	}

	// BEGIN EXTRA CODE
	
	private class BarChartDemo7 {
		
		private static final long serialVersionUID = 1L;
		
		//Create a member variable for the chart classes that will retrieve list information from the outer class
		public java.util.List<jfreecharts.proxies.RowBar> BarList = RowBarList; //This is passed in from the outer class
				
		//Create a member variable for the chart class that will retrieve the image entity for the outer class
		public IMendixObject barChartImage = BarImage;
		
		//Create a member variable for the bar chart class that will retrieve the title of the bar chart graph
		public String barChartTitle = BarChartTitle;
				
		//Create a member variable for the bar chart class that will retrieve the x axis label
		public String xAxisLabel = XAxisLabel;
				
		//Create a member variable for the bar chart class that will retrieve the y axis label
		public String yAxisLabel = YAxisLabel;
		
					

	    /**
	     * Creates a new demo instance.
	     *
	     * @param title  the frame title.
	     */
	    public BarChartDemo7(String title) throws Exception{

	        //super(title);
	        CategoryDataset dataset = createDataset();
	        JFreeChart chart = createChart(dataset);
	        
	      //just create a image file
	       // org.jfree.chart.encoders.SunJPEGEncoderAdapter sjea = new org.jfree.chart.encoders.SunJPEGEncoderAdapter();
	        //try{
	        //sjea.encode(chart.createBufferedImage(500,270), new java.io.FileOutputStream(File.createTempFile("MyFile2.png", ".tmp")));
	        //} catch(Exception e){
	        //e.printStackTrace();
	        //} 
	        
	        
	        //ChartPanel chartPanel = new ChartPanel(chart, false);
	       // chartPanel.setPreferredSize(new Dimension(500, 270));
	        //setContentPane(chartPanel);

	    }

	    /**
	     * Returns a sample dataset.
	     * 
	     * @return The dataset.
	     */
	    private CategoryDataset createDataset() throws Exception  {
	    	
	    	    
	        // create the dataset...
	        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
	        
	        //Read in the values from the List of rows
	        for(int i=0;i<BarList.size(); i++)
	           	dataset.addValue(BarList.get(i).getYValue(), BarList.get(i).getSeries(), BarList.get(i).getXValue());     
	        
	      	        
	    return dataset;
	        
	    }
	    
	    /**
	     * Creates a sample chart.
	     * 
	     * @param dataset  the dataset.
	     * 
	     * @return The chart.
	     */
	    private JFreeChart createChart(CategoryDataset dataset) throws Exception {
	        
	        // create the chart...
	        JFreeChart chart = ChartFactory.createBarChart(
	        	barChartTitle,         // chart title
		        xAxisLabel,               // domain axis label
		        yAxisLabel,               // range axis label
	            dataset,                  // data
	            PlotOrientation.VERTICAL, // orientation
	            true,                     // include legend
	            true,                     // tooltips?
	            false                     // URLs?
	        );

	        // OPTIONAL CUSTOMIZATION OF THE CHART...

	        // Set the background color for the chart...
	        chart.setBackgroundPaint(Color.white);

	        // Get a reference to the plot for further customization...
	        CategoryPlot plot = chart.getCategoryPlot();
	        plot.setBackgroundPaint(Color.white);
	        plot.setDomainGridlinesVisible(true);
	        
	        // Set the range axis to display integers only...
	        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
	        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

	        // Disable bar outlines...
	        BarRenderer renderer = (BarRenderer) plot.getRenderer();
	        renderer.setBarPainter(new StandardBarPainter());  //Takes the white gloss off of bars 
	        renderer.setShadowVisible(false);
	        renderer.setDrawBarOutline(false);
	        
	        /* Example for setting up a gradient paint for series...
	        GradientPaint gp0 = new GradientPaint(
	            0.0f, 0.0f, Color.blue, 
	            0.0f, 0.0f, new Color(0, 0, 64)
	        );
	        GradientPaint gp1 = new GradientPaint(
	            0.0f, 0.0f, Color.green, 
	            0.0f, 0.0f, new Color(0, 64, 0)
	        );
	        GradientPaint gp2 = new GradientPaint(
	            0.0f, 0.0f, Color.red, 
	            0.0f, 0.0f, new Color(64, 0, 0)
	        );
	        
	        renderer.setSeriesPaint(0, gp0);
	        renderer.setSeriesPaint(1, gp1);
	        renderer.setSeriesPaint(2, gp2);

			*/
	        
	        
	           
	        //Take each series in the dataset list and compare it to each series entered in the bar chart list
	        //If the series are equal set the color of the series equal to the RGB value in the row
	        
	        /*
	        for(int i=0; i<dataset.getRowKeys().size(); i++)
	        {
	        	dataset.getRowKey(i);
	        	
	        	for(int j=0; j<BarList.size(); j++)
	        	{
	        		if(dataset.getRowKey(i).equals(BarList.get(j).getSeries()))
	        		{
	        			renderer.setSeriesPaint(i, new Color(BarList.get(j).getR(),BarList.get(j).getG(), BarList.get(j).getB()));
	        			break;
	        		}
	        		
	        	}
	        	
	        }
	        */
	        
	        
	      //Take each series in the dataset list and compare it to each series entered in the bar chart list
	        //If the series are equal set the color of the series equal to the RGB value in the row
	        
	        
	        for(int i=0; i<dataset.getRowKeys().size(); i++)
	        {
	        	dataset.getRowKey(i);
	        	
	        	
	        	boolean seriesFound = false;
	        	int j =0; //Each time start comparing series at the beginning of BarList
	        	
	        	//Process the inner loop until the series is found or at the end of BarList (process loop while series is not found)
	        	while(!seriesFound && j<BarList.size())
	        	{
	        		
	        		if(dataset.getRowKey(i).equals(BarList.get(j).getSeries()))
	        		{
	        			renderer.setSeriesPaint(i, new Color(BarList.get(j).getR(),BarList.get(j).getG(), BarList.get(j).getB()));
	        			seriesFound=true;
	        		}
	        		
	        		j++;
	        		
	        	}
	        	
	        }
	        
	        
	        
	        CategoryAxis domainAxis = plot.getDomainAxis();
	        domainAxis.setCategoryLabelPositions(
	            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
	        );
	        
	        
	        // OPTIONAL CUSTOMIZATION COMPLETED
	        
	        //Stores the image in an entity 
	        
	        //Set a width and height for the chart
	        int width=640; 
	        int height=480; 
	       
	        //Create a new temp file
	        File BarChart = File.createTempFile("MyFile.png", ".tmp");
	        
	        //Save the chart in the newly created temp file
	        ChartUtilities.saveChartAsPNG(BarChart, chart, width, height);
	       
	        //Create a new inputStream that points to the location of the created image
	        FileInputStream is = new FileInputStream(BarChart);
	     
	        //Store the image in the entity barChartImage
	        com.mendix.core.Core.storeFileDocumentContent(getContext(),barChartImage,is);
	        
	        //Delete temporary file after exit 
	        BarChart.deleteOnExit();   
	        
	    return chart;
	        
	    }
	    
   }
	
//}	
	// END EXTRA CODE
}
