// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jfreecharts.actions;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Stroke;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class LineChart extends CustomJavaAction<String>
{
	private java.util.List<IMendixObject> __RowLineList;
	private java.util.List<jfreecharts.proxies.RowLine> RowLineList;
	private IMendixObject LineChartImage;
	private String LineChartTitle;
	private String XAxisLabel;
	private String YAxisLabel;

	public LineChart(IContext context, java.util.List<IMendixObject> RowLineList, IMendixObject LineChartImage, String LineChartTitle, String XAxisLabel, String YAxisLabel)
	{
		super(context);
		this.__RowLineList = RowLineList;
		this.LineChartImage = LineChartImage;
		this.LineChartTitle = LineChartTitle;
		this.XAxisLabel = XAxisLabel;
		this.YAxisLabel = YAxisLabel;
	}

	@Override
	public String executeAction() throws Exception
	{
		this.RowLineList = new java.util.ArrayList<jfreecharts.proxies.RowLine>();
		if (__RowLineList != null)
			for (IMendixObject __RowLineListElement : __RowLineList)
				this.RowLineList.add(jfreecharts.proxies.RowLine.initialize(getContext(), __RowLineListElement));

		// BEGIN USER CODE
		
		/**
	     * Starting point for the demonstration application.
	     *
	     * @param args  ignored.
	     */
		
		LineChartDemo2 demo = new LineChartDemo2("");
        //demo.pack();
        //RefineryUtilities.centerFrameOnScreen(demo);
        //demo.setVisible(true);
        
        
        return "The chart prints";
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "LineChart";
	}

	// BEGIN EXTRA CODE
	
	
	/**
	 * A simple demonstration application showing how to create a line chart using
	 * data from an {@link XYDataset}.
	 * <p>
	 * IMPORTANT NOTE:  THIS DEMO IS DOCUMENTED IN THE JFREECHART DEVELOPER GUIDE.
	 * DO NOT MAKE CHANGES WITHOUT UPDATING THE GUIDE ALSO!!
	 */
	private class LineChartDemo2  {
		
		private static final long serialVersionUID = 1L;
		
		//Create a member variable for the chart classes that will retrieve list information from the outer class
		public java.util.List<jfreecharts.proxies.RowLine> BarList = RowLineList; //This is passed in from the outer class
				
		//Create a member variable for the chart class that will retrieve the image entity from the outer class
		public IMendixObject lineChartImage = LineChartImage;
		
		//Create a member variable for the line chart class that will retrieve the title of the bar chart graph
		public String lineChartTitle = LineChartTitle;
						
		//Create a member variable for the line chart class that will retrieve the x axis label
		public String xAxisLabel = XAxisLabel;
						
		//Create a member variable for the line chart class that will retrieve the y axis label
		public String yAxisLabel = YAxisLabel;
		
		
		 /**
	     * Creates a new demo.
	     *
	     * @param title  the frame title.
		 * @throws IOException 
	     */
	    public LineChartDemo2(String title) throws IOException {
	        //super(title);
	    	
	    	 JFreeChart chart = createChart(createDataset());
	        
	    	//just create a image file
	        //org.jfree.chart.encoders.SunJPEGEncoderAdapter sjea = new org.jfree.chart.encoders.SunJPEGEncoderAdapter();
	        //try{
	        //sjea.encode(chart.createBufferedImage(500,270), new java.io.FileOutputStream(File.createTempFile("MyFile2.png", ".tmp")));
	       // } catch(Exception e){
	        //e.printStackTrace();
	       // } 
	    	
	    	//JPanel chartPanel = createDemoPanel();
	        //chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
	        //setContentPane(chartPanel);
	    }

	    /**
	     * Creates a sample dataset.
	     *
	     * @return a sample dataset.
	     */
	    private XYDataset createDataset() {
	    	
	    	//Create arraylist to hold series and arraylist to hold copy series into 
	    	List<XYSeries> SeriesList = new ArrayList<XYSeries>(); 
	    	List<XYSeries> SeriesListWithoutDuplicates = new ArrayList<XYSeries>();   
	        
	        //Loop through the list passed in from Mendix modeler and create a new series with each XValue read in from the Mendix modeler, copy into an ArrayList
	        for(int i=0;i<BarList.size(); i++)
	        	SeriesList.add(new XYSeries (BarList.get(i).getSeries()));     
	    	
	        //Create a set to copy series from arraylist to remove duplicates
	        Set<XYSeries> SeriesSet = new LinkedHashSet<XYSeries>(SeriesList);
	        
	    	//Copy series from set into another arraylist so we can access series
	        SeriesListWithoutDuplicates.addAll(SeriesSet);
	        
	        
	        //Loop through the list that holds the series without duplicates, and compare them to the elements passed in from the Mendix modeler 
	        for(int i =0; i<SeriesListWithoutDuplicates.size(); i++)
	        {
	        	
	        	for(int j =0; j<BarList.size(); j++)
	        	{
	        		if(BarList.get(j).getSeries().equals(SeriesListWithoutDuplicates.get(i).getKey()))
	        		{
	        			//Add the X and Y values to the series
	        			SeriesListWithoutDuplicates.get(i).add(BarList.get(j).getXValue(),BarList.get(j).getYValue());
	        		}
	        		
	        	}
	        		
	        }
	        
	        XYSeriesCollection dataset = new XYSeriesCollection();
	        
	        for(int i=0; i<SeriesListWithoutDuplicates.size(); i++)
		        dataset.addSeries(SeriesListWithoutDuplicates.get(i));
	       
	        
	        
	        
	        /* Sample way for creating new series and adding them to the dataset
	        XYSeries series1 = new XYSeries("First");
	        series1.add(1.0, 1.0);
	        series1.add(2.0, 4.0);
	        series1.add(3.0, 3.0);
	        series1.add(4.0, 5.0);
	        series1.add(5.0, 5.0);
	        series1.add(6.0, 7.0);
	        series1.add(7.0, 7.0);
	        series1.add(8.0, 8.0);

	        XYSeries series2 = new XYSeries("Second");
	        series2.add(1.0, 5.0);
	        series2.add(2.0, 7.0);
	        series2.add(3.0, 6.0);
	        series2.add(4.0, 8.0);
	        series2.add(5.0, 4.0);
	        series2.add(6.0, 4.0);
	        series2.add(7.0, 2.0);
	        series2.add(8.0, 1.0);

	        XYSeries series3 = new XYSeries("Third");
	        series3.add(3.0, 4.0);
	        series3.add(4.0, 3.0);
	        series3.add(5.0, 2.0);
	        series3.add(6.0, 3.0);
	        series3.add(7.0, 6.0);
	        series3.add(8.0, 3.0);
	        series3.add(9.0, 4.0);
	        series3.add(10.0, 3.0);

	        XYSeriesCollection dataset = new XYSeriesCollection();
	        dataset.addSeries(series1);
	        dataset.addSeries(series2);
	        dataset.addSeries(series3);
			*/


	        return dataset;

	    }

	    /**
	     * Creates a chart.
	     *
	     * @param dataset  the data for the chart.
	     *
	     * @return a chart.
	     * @throws IOException 
	     */
	    //@SuppressWarnings("deprecation")
		private JFreeChart createChart(XYDataset dataset) throws IOException {

	        // create the chart...
	        JFreeChart chart = ChartFactory.createXYLineChart(
	            lineChartTitle,      // chart title
	            xAxisLabel,                      // x axis label
	            yAxisLabel,                      // y axis label
	            dataset,                  // data
	            PlotOrientation.VERTICAL,
	            true,                     // include legend
	            true,                     // tooltips
	            false                     // urls
	        );
	        
	        
	        // Set the background color for the chart...
	        chart.setBackgroundPaint(Color.white);
	        

	        // Get a reference to the plot for further customization...
	        XYPlot plot = (XYPlot) chart.getPlot();
	        plot.setBackgroundPaint(Color.white);
	        plot.setDomainPannable(true);
	        plot.setRangePannable(true);
	        
	        
	        XYLineAndShapeRenderer renderer
	                = (XYLineAndShapeRenderer) plot.getRenderer();
	        
	        final Stroke thick = new BasicStroke(3.5f);
	        
	        renderer.setBaseShapesVisible(true);
	        renderer.setBaseShapesFilled(true);
	        
	        //Create arraylist to hold series and arraylist to hold copy series into 
	    	List<XYSeries> SeriesList = new ArrayList<XYSeries>(); 
	    	List<XYSeries> SeriesListWithoutDuplicates = new ArrayList<XYSeries>();   
	        
	        //Loop through the list passed in from Mendix modeler and create a new series with each XValue read in from the Mendix modeler, copy into an ArrayList
	        for(int i=0;i<BarList.size(); i++)
	        	SeriesList.add(new XYSeries (BarList.get(i).getSeries()));     
	    	
	        //Create a set to copy series from arraylist to remove duplicates
	        Set<XYSeries> SeriesSet = new LinkedHashSet<XYSeries>(SeriesList);
	        
	    	//Copy series from set into another arraylist so we can access series
	        SeriesListWithoutDuplicates.addAll(SeriesSet);
	        
	        
	      //Loop through the list that holds the series without duplicates, and compare them to the elements passed in from the Mendix modeler 
	        for(int i =0; i<SeriesListWithoutDuplicates.size(); i++)
	        {
	        	//Set the line thickness for each series
	        	renderer.setSeriesStroke(i, thick);
	        	boolean seriesFound = false;
	        	int j =0; //Each time start comparing series at the beginning of BarList
	        	
	        	//Process the inner loop until the series is found or at the end of BarList (process loop while series is not found)
	        	while(!seriesFound && j<BarList.size())
	        	{
	        		if(BarList.get(j).getSeries().equals(SeriesListWithoutDuplicates.get(i).getKey()))
	        		{
	        			//Get the color for that series
	        			renderer.setSeriesPaint(i, new Color(BarList.get(j).getR(),BarList.get(j).getG(), BarList.get(j).getB()));
	        			seriesFound=true;
	        		}
	        		
	        		j++;
	        	}
	        		
	        }
	    	
	        // change the auto tick unit selection to integer units only...
	        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
	        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

	        
	        //OPTIONAL CUSTOMIZATION COMPLETED
	        
	        //Stores the image in an entity 
	        
	        //Set a width and height for the chart
	        int width=640; 
	        int height=480; 
	       
	        //Create a new temp file
	        File LineChart = File.createTempFile("MyFile.png", ".tmp");
	        
	        //Save the chart in the newly created temp file
	        ChartUtilities.saveChartAsPNG(LineChart, chart, width, height);
	       
	        //Create a new inputStream that points to the location of the created image
	         FileInputStream is = new FileInputStream(LineChart);
	     
	        //Store the image in the entity barChartImage
	         com.mendix.core.Core.storeFileDocumentContent(getContext(),lineChartImage,is);
	        
	        //Delete temporary file after exit 
	         LineChart.deleteOnExit();   
	        
	        
	        
	        return chart;
	    }

	    /**
	     * Creates a panel for the demo (used by SuperDemo.java).
	     *
	     * @return A panel.
	     * @throws IOException 
	     */
		
		//Create demo panel method does not get called, it creates a display error during runtime
	    public JPanel createDemoPanel() throws IOException {
	        JFreeChart chart = createChart(createDataset());
	        ChartPanel panel = new ChartPanel(chart);
	        panel.setMouseWheelEnabled(true);
	        return panel;
	    }

	    
	  

	}

	
	
	
	// END EXTRA CODE
}
